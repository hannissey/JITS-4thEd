

Chapter 9 - Inheritance

-------------------------------------------------------------

Learning Outcomes:

	• explain the term inheritance;
	• design inheritance structures using UML notation;
	• implement inheritance relationships in Java;
	• distinguish between method overriding and method overloading;
	• explain the term type cast and implement this in Java;
	• explain the use of the abstract modifier when applied to classes and
	methods;
	• explain the use of the final modifier, when applied to classes and methods;
	• describe the way in which all Java classes are derived from the Object class.

-------------------------------------------------------------

9.1 Introduction

We spoke about some of the benefits of using OOP in the previous chapter, one of which 
was the opportunity to reuse classes. We will be building on this in this chapter, which 
is inheritance. Inheritance enables us to extend classes, by using one that already exists
and adding to it without modifying or affecting the original class.

So inheritance is a way of extending classes by adding attributes and methods using an additional class.

-------------------------------------------------------------

9.2 Defining Inheritance

Say you have a class, Employee, within a program. You wish to use the class to establish Part Time
Employees on the system, however the original class does not have the attributes and methods you need.
It does however contain the basics that you will be using to create your part time employee.

You need to extend the Employee class to another class you will build, PartTimeEmployee which will extend
the Employee class by way of inheritance.

In UML notation, inheritance is depicted by a triangle.
(To visualise, imagine each class is in a box, and the symbol /\ is a triangle!)


			Employee							
			_______________________

			-number : String
			-name	: String								
			_______________________

			+Employee(String, String)
			+setName(String)
			+getNumber() : String
			+getName() : String
			
					/\
				   /  \
				     |
					 |
			PartTimeEmployee							
			_______________________

			-hourPay : double								
			_______________________

			+PartTimeEmployee(String, String, double)
			+setHourlyPay(double)
			+getHourlyPay() : double
			+calculateWeeklyPay(int) : double				 

We don't need to rewrite the Employee methods and attributes in our new
PartTimeEmployee class, as these will be extended from the Employee class
to our new one.

An inheritance relationship is a hierarchical relationship:
	- The Employee class is the superclass (or base class).
	- The PartTimeEmployee class is the subclass (or derived class).
	- another way to think of it is as a 'is-a-kind-of' relationship, ie
	  a PartTimeEmployee is a kind of Employee.
	  
-------------------------------------------------------------

9.3 Implementing Inheritance in Java

To extend our Employee class, we need to tell Java that PartTimeEmployee is a
subclass of Employee. We do this using the keyword extends.
This is declared within the class header, as below:

	public class PartTimeEmployee extends Employee
	
This means PartTimeEmployee inherits all the attributes and methods used within
the Employee class.
Therefore any PartTimeEmployee object will have the same attributes as an
object of the Employee class.

What about private attributes and methods?

Because the attributes of Employee are private, this means that, like any
other class, the subclass PartTimeEmployee cannot directly access them.
There are a few solutions:

1. Declare original attributes as public.

	We don't want to do this as this removes the encapsulation aspect.

2. Use the keyword protected instead of private.

	Declaring attributes and methods as protected means they are accessible
	to subclasses of the superclass. 
	However, this means the original class would have to be amended, and again
	it goes against encapsulation as protected attributes can be accessed by
	other classes within the same package, and not just the subclass.
	This is an acceptable approach however, especially when you plan to have
	subclasses that use the attributes within the superclass.
	*** In a UML diagram, a protected attribute is marked with a #
	
3. Clever use of methods to access the private attributes.

	We will need to plan appropriate get- and set- methods to help us access the data. 

The attributes in our subclass are declared as normal - these will be used in
addition to the attributes in the superclass.

The constructor is interesting. 

Look at the constructor within the Employee class:

	public Employee(String numberIn, String nameIn)
	{
		number = numberIn;
		name = nameIn;
	}
	
Now look at the constructor within the PartTimeEmployee class:

	public PartTimeEmployee(String numberIn, String nameIn, double hourlyPayIn)
	{
		super(numberIn, nameIn); // call the constructor of the superclass
		hourlyPay = hourlyPayIn;
	}
	
The PartTimeEmployee constructor has 3 formal parameters. The first two will
be assigned to the Employee class attributes, number and name, and the last will
be assigned to the PartTimeEmployee class hourlyPay.

However - we need to assign the name and number via the superclass, as these
attributes are not contained within the subclass.
This is done using the constructor super() as below:

	super(numberIn, nameIn);
	
This constructor has to be the first declaration, otherwise the code will not compile.

-------------------------------------------------------------

9.4 Extending the Oblong Class

We have created a program called ExtendedOblongTester which builds
an oblong using the attributes from the superclass, Oblong. Then
within the subclass ExtendedOblong we have a new attribute, symbol,
and a method to draw an Oblong using that symbol.

So we are building an object with the Oblong class via the ExtendedOblong
class, then adding a new attribute and methods.
Below is the UML notation for both classes:

			Oblong							
			_______________________

			-length : double
			-height : double								
			_______________________

			+Oblong(double, double)
			+setLength(double)
			+setHeight(double)
			+getLength() : double
			+getHeight() : double
			+calculateArea() : double
			+calculatePerimeter() : double
			
					/\
				   /  \
				     |
					 |
			ExtendedOblong							
			_______________________

			-symbol : char								
			_______________________

			+ExtendedOblong(double, double, char)
			+setSymbol(char)
			+draw() : String

A new tip we learn here is that Java has escape characters:

	\n creates a new line
	\t inserts a tab
	
These are useful for making our code readable.

Another technique we are using in the ExtendedOblong class is type casting.
If you look at the draw method within ExtendedOblong, you will see
two integer variables have been declared.
However, why would we need integer variables if all the data handled
by Oblong are double data types?

We need integer data values because the draw method creates rows and
columns. We cannot have a table with 2.1 rows or 5.4 columns. This
is where type casting is useful - it forces an item to change from
one data type to another.

The syntax below:

	l = (int) getLength();
	
is an example of type casting. Here we are invoking the method
getLength(), which returns a double, but turning it into an int
when assigning it to the variable l.

When using type casting, you need to declare the new data type
before the method call, as below:

	variable = (dataType) methodName();
	
There will be some form of data loss as an integer cannot store
the decimal of a double, but for our purpose here it does not matter.

-------------------------------------------------------------

9.5 Method Overriding

Method overriding is another example of polymorphism in OOP.

Previously, you have seen that polymorphism can be achieved with method overloading, where two methods
can have the same name but are distinguished by the compiler via the parameters.

Method Overriding can be used in subclasses to override methods contained in the superclass.

To demonstrate, we will use our BankAccount class and create a subclass called GoldAccount.
GoldAccount gives an additional feature: that of an overdraft. This means that GoldAccount holders are
able to withdraw more money than their account holds.

This wouldn't work if we used the withdraw() method of the BankAccount, as the condition is that a 
withdraw attempt will fail should the withdrawal amount exceed the balance.

So we need to create a new method solely for GoldAccount holders to enable them to take advantage of
their overdraft facility.

Below is the UML notation for both the BankAccount superclass, and the GoldAccount subclass.
You will note the single change we have made is making the balance attribute protected rather than private.


			BankAccount							
			_______________________

			-accountNumber : String
			-accountName : String
			#balance : double							
			_______________________

			+BankAccount(String,String)
			+getAccountNumber() : String
			+getAccountName() : String
			+getBalance() : double
			+deposit(double)
			+withdraw(double) : boolean
			
					/\
				   /  \
				     |
					 |
			GoldAccount						
			_______________________

			-overdraftLimit : double								
			_______________________

			+GoldAccount(String, String, double)
			+setLimit(double)
			+getLimit() : double
			+withdraw(double) : boolean

Below is our new withdraw method in the GoldAccount class:

	@Override
	public boolean withdraw(double amountIn)
	{
		if(amountIn > balance + overdraftLimit)
		{
			return false; // no withdrawal was made - insufficient funds
		}
		else
		{
			balance = balance - amountIn; // balance is protected, so we have direct access to it
			return true; // money was withdrawn successfully
		}
	}
	
Compare this to the original BankAccount withdraw method:

	public boolean withdraw(double amountIn)
	{
		if(amountIn > balance)
		{
			return false;
		}
		else 
		{
			balance = balance - amountIn;
			return true;
		}
	}
	
There are two changes, the first is that the method is preceded by the @Override keyword.
The second is the additional of + overdraftLimit to the condition in the if statement. This then
increases the amount the GoldAccount holder is able to withdraw.

The @Override keyword is a Java annotation.
It is not compulsory to include this when overriding a method, but it is good practice.
An annotation always begins with an @ symbol and an uppercase letter.
The @Override keyword tells the compiler we are overriding a method with the same name, and it then knows
to check the method is being used correctly (eg, you get an error message if you call a method and do
not use the right parameters).
If you did not use the @Override annotation, the compiler thinks you have written a new method and
ignores the original.

Just as the compiler knows which overloaded method to use by way of the parameter list, the compiler
knows which overridden method to use by the object they are associated, ie:

	bankAcc.withdraw(1250);
	goldAcc.withdraw(1250);

The compiler knows to use the Bank Account method with the first method call, because bankAcc is a
Bank Account object.
goldAcc is a GoldAccount object, so the Gold Account withdraw method is called.

See the OverridingDemo program for a demonstration.

-------------------------------------------------------------

9.6 Abstract Classes

Abstract classes are classes that are never used to create objects.
We have created our Employee super class, which creates an Employee with name and number, and has
methods to process this data. 
We have also created our subclasses PartTimeEmployee and FullTimeEmployee:

									Employee							
									_______________________
						
									-number : String
									-name	: String								
									_______________________
						
									+Employee(String, String)
									+setName(String)
									+getNumber() : String
									+getName() : String
									
											/\
										   /  \
					 --------------------------------------------
				     |											|
					 |											|
			FullTime Employee							PartTimeEmployee							
			_______________________                     _______________________

			-annualSalary : double						-hourlyPay : double								
			_______________________

			+FullTimeEmployee(String, String, double)  	+PartTimeEmployee(String, String, double)
			+setAnnualSalary(double)					+setHourlyPay(double)
			+getAnnualSalary() : double					+getHourlyPay() : double
			+calculateMonthlyPay() : double				+calculateWeeklyPay(int) : double	


We will never need to use Employee to create an Employee object, as PartTimeEmployee and FullTimeEmployee
does that for us.
That means we can declare Employee as an abstract class by using the syntax below:

	public abstract class Employee
	
We are now unable to create an Employee object, but can create a FullTimeEmployee or PartTimeEmployee
object using the Employee class attributes and methods.

We may have a superclass that has hundreds of subclasses, but we know that whenever we create an object
using one of the subclass, it is still an object of the superclass.
This is why we can call a FullTimeEmployee or PartTimeEmployee object by using the Employee class name.
This is because both of the subclasses are still Employee objects.

We are unable to call subclass methods using the superclass name however, because of the hierarchical
nature of inheritance.

-------------------------------------------------------------

9.7 Abstract Methods

An abstract method is a method that belongs to an abstract class. 
It has a method definition but no implementation, ie a header but no body:

	public abstract String getStatus();
	
This status is used in the abstract class Employee to retrieve the 'status' of an object, in this case,
whether an Employee is Full Time or Part Time.

An abstract method needs to be overridden by a method within the subclasses, so the method below
will feature in both FullTimeEmployee and PartTimeEmployee:

	@Override
	public String getStatus()
	{
		return "Part-Time";
	}

This then overrides the abstract method in the superclass.
It is a useful way of finding out what object has been created from which class.

Abstract methods are required when an object has been created by the subclass of an abstract class.
So despite not being able to create an Employee class, we can still create a reference to an Employee
object by using the below syntax:

	Employee emp;
	
Here we have created a reference to an employee object, as seen in EmployeeTester3.
We do not know, at this point, which Employee subclass will be used to created an Employee object
because this is determined at runtime.

The abstract method getStatus enables us to call the method within the Employee class on the created
object to determine whether the object is a FullTimeEmployee or PartTimeEmployee.

-------------------------------------------------------------

9.8 The final Modifier

We have used the final modifier in created constant variables that cannot be modified in previous
programmes.

However, the final modifier can also apply to classes and methods.

When applied to a class, this means that no subclasses can be created, and this is the final class:

	public final class SomeClass

When applied to a method, the method cannot be overridden.

	public final void someMethod()

-------------------------------------------------------------

9.9 The Object Class

In Java, every single class is a subclass of the Object class - a super superclass!
Therefore, every object in Java is-a-kind-of Object.

-------------------------------------------------------------

9.10 The toString Method

The toString method is a great way of printing out all the details of your class without having to
create and call methods to do so. 

Remember when we tried to 'print out' an object, as below:

	System.out.println(acc);
	
It would simply display the memory address rather than the actual values.

Using the toString method turns the variables within the class into their actual values, meaning
when you use them within the toString method, then call them, they will display on the screen.

So instead of coding the below using specific methods:

	// display account details
	System.out.print("*** Account Details ***"+ "\n\n" +				
			"Account number: " + account1.getAccountNumber() + "\n" +
			"Account name: " + account1.getAccountName() + "\n" +
			"Interest Rate: " + BankAccount2.getInterestRate() + "%\n" + 
			"Current Balance: £" + account1.getBalance() + "\n\n"
		);

We can instead simply create a method in the class which, when called, will print the info:

	@Override
	public String toString()
	{
		return "Name: " + accountName + '\n' 
				+ "Account number: " + accountNumber + '\n'
				+ "Balance: " + balance;
	}
	
The @Override is required because, as an object, BankAccount is inherited from the Java super superclass
Object, which already has a method toString().

-------------------------------------------------------------

9.11 Wrapper Classes And Autoboxing

We already know that collection classes <ArrayList> for example, cannot hold primitive data types.
There is a way around this however by using wrapper classes.

A wrapper class "wrap" a class around the type.
This is possible because Java has a class that corresponds to every primitive type, for example:

	data type	class
	-------------------------
		  int = Integer
		 char = Character
		float = Float
	   double = Double
	   
An object of the Integer class holds an integer value, an object of the Character class holds a
char, and so on. This enables us to store primitive data types as Objects, meaning we can store
them in an ArrayList:

	ArrayList<Integer> myList = new ArrayList<>();
	
Compare this to an ArrayList declaration from a previous exercise:

	ArrayList<Oblong> apartmentRooms = new ArrayList<>(); 
	
You can see that both ArrayLists both contain Objects, Integer and Oblong, because we are using the
Integer class to store integers as objects by 'wrapping' them around the data type.

Using the ArrayList methods is just the same, as we can see:

	myList.add(new Integer(37));
	
Again compare this to a previous example:

	apartmentRoomsIn.add(new Oblong(length, height));
	
You can see the parameter accepted by the Integer class method is the actual integer value.

We can make using ArrayList methods with wrapper classes even easier by using Java's technique of
autoboxing. This enables us to be able to add a new integer to our ArrayList by way of this syntax:

	myList.add(37);
	
We do not have to declare a new Integer object. This is because autoboxing automatically converts
the input to the desired Object, meaning our 37 integer is turned into an Integer object without us
having to declare this.

The reverse of this is unboxing, which simply converts the wrapper class back to the primitive data type:

	int x = myList.get(0);
	
As you can see, we are assigning an Object to an integer variable. Thanks to unboxing, Java knows to
automatically convert the object to an integer.

Wrapper classes, autoboxing and unboxing apply to all primitive data types.

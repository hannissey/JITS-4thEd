
Chapter 9 - Inheritance
9.12 Self-test Questions

1. Below is a UML diagram for an inheritance relationship between two classes—
Vehicle and SecondHandVehicle.

(a) By referring to the diagram, explain the meaning of the term inheritance.
	
	Inheritance is when we create a class that extends another class. 
	In the diagram Vehicle is the super class that is inherited by the subclass SecondHandVehicle.
	The subclass inherits all the attributes and methods of the superclass, and adds additional
	attirbutes and methods that are pertinent to the subclass.

(b) What do you think might be the function of each of the constructors?

	The Vehicle class constructor creates a Vehicle Object that takes in the parameters 
	String regNo, String make, int yearOfManufacture and double value.

	The SecondHandVehicle class constructor does the same as the above but has an additional
	parameter, the int numberOfOwners.

(c) What do you think might be the reason for the fact that in the Vehicle
class there is a set-method for the value attribute, but not for the other
three?

	There is a set method for the value of the vehicle because this may change during the Object's 
	lifetime. The other 3 attributes, Registration, Make and Year of Manufacture will not need to be
	changed.

(d) Write the header for the SecondHandVehicle class.

	public class SecondHandVehicle extends Vehicle
	{
	}

2. 
(a) Consider the following classes and arrange them into an inheritance hierarchy using UML notation:


					   Shape							
			  _______________________

			
						/\
					   /  \
	         ------------------------
			 |						|
			 |						|
						 
		   Circle				  Square				
	_________________        __________________
	
			/\
		   /  \
		   ----
	         |
	         |
	         
	   FilledCircle
	__________________


(b) Write the top line of the class declaration for each of these classes when
implementing them in Java.

	Shape
	
		public abstract class Shape
		
	Square
	
		public class Square extends Shape
		
	Circle
	
		public class Circle extends Shape
		
	FilledCircle
	
		public class FilledCircle extends Circle		
	 

(c) Explain what effect the abstract modifier has on a class and identify
which, if any, of the classes above could be considered as abstract classes?

	The abstract modifier essentially restricts a class and makes it impossible to create an object
	from this class.
	Shape can be considered an abstract class, because it is unlikely that when creating a shape, we
	would create a circle, square, triangle etc, which are shapes, but of a specific type.


3. Consider once again an application to record the reading of a pressure sensor as discussed in
programming exercise 4 of the previous chapter. 
Now assume a SafeSensor class is developed that ensures that the pressure is never set above some
maximum value. A SafeSensor is-a-kind-of Sensor. The UML design is given below:

		Sensor
		_____________________
		
		-pressure : double 
		
		_____________________
		
		+Sensor () 
		+Sensor (double) 
		+setPressure(double): boolean 
		+getPressure( ): double 
		
				/\
			   /  \
			   ----
		         |
		         |


		SafeSensor
		_____________________
		
		-max: double
		_____________________
		
		+SafeSensor (double) 
		+SafeSensor (double, double) 
		+setPressure(double): boolean 
		+getMax( ): double
		

The SafeSensor class has two constructors. The first sets the maximum safe
value to the given parameter and the actual value of the sensor reading to 10.

The second constructor accepts two parameters, the first is used to set the
maximum safe value and the second is used to set the initial value for the
reading of the sensor.

The setPressure method is redefined so that only safe values (values no
greater than the safe maximum value and no less than zero) are set.

(a) In the example above, distinguish between method overriding and method
overloading.

	Method overriding is when the subclass overrides a method in the super class. They are distinguished
	by which object they are called on, for example if we created a SafeSensor object Incubator
	and used the method setPressure(), despite the fact Incubator is both a Sensor AND a SafeSensor, and
	there is a method with the same name in both classes, AND the methods have the same implementation,
	the compiler knows which method to use by the object it is called upon, eg:
	
		Incubator.setPressure(double valueIn);
	
	would call the SafeSensor setPressure.
	
	Method overloading is when two methods within the same class have the same name, but are
	differentiated by their parameters.
	So we see in both superclass Sensor and subclass SafeSensor we have two methods of the same name:
	Sensor() and SafeSensor(). These are the constructors of each class, and are overloaded, because
	both constructors of the two classes each take different parameters. Hence the compiler knows
	which one to use.

(b) Below is one attempt at the Java code for the first SafeSensor constructor.
Identify why it will not compile.

	// THIS WILL NOT COMPILE!
	public SafeSensor(double maxIn)
	{
		max = maxIn;
		pressure = 10;
	}
	
	The above code will not compile because the super constructor is not used.
		super();
	The superclass constructor parameters need to be called within the subclass constructor otherwise
	the variable pressure is hidden within the Sensor class. It needs to be passed to the superclass
	via the super constructor to be able to compile.

(c) Here is another attempt at the Java code for the first SafeSensor constructor.
Identify why it will not compile.

	// THIS WILL NOT COMPILE!!
	public SafeSensor(double maxIn)
	{
		max = maxIn;
		super();
	}
	
	This will not compile because the super constructor needs to be used first.
	"This is to prevent the subclass part of the object being initialized prior
	to the superclass part of the object being initialized. "
	- https://docs.oracle.com/javase/tutorial/java/IandI/super.html

(d) Write the correct code for the first SafeSensor constructor.

	public SafeSensor(double maxIn)
	{
		super();
		max = maxIn;
	}

4. By referring to the BankAccount class of Sect. 9.5, distinguish between
private, public and protected access.

	Private, public and protected are all modifier keywords. They are used to control access
	within our applications.
	
	Private means the attribute or method can only be used within the class itself. 
	The attribute cannot be accessed by another class, nor can a method be used by another class.
	In UML notation, it is depicted with a -
	BankAccount example: private String accountName;
	
	Protected means the attribute or method can be accessed by the methods of any subclasses of that class.
	It also means anything protected can be accessed by classes within the same package.
	Think carefully about using protected because it defeats the purpose of encapsulation.
	In UNL notation, it is depicted with a #
	BankAccount example: protected double balance;
	
	Public means it is accessible to all classes.
	In UML notation, it is depicted with a +
	BankAccount example: public BankAccount(String accountNumberIn, String accountNameIn)
	

5. How are all classes in Java related to the Object class?

	The Object class in Java is the super superclass. All classes are inherited from the Object class.
	Remember that when we create subclasses, these have a 'a-kind-of-a' relationship with the superclass.
	Each object we create in Java is a-kind-of Object.

6. Explain, with an example, the term type cast.

	Type cast is a way of converting a data type into another.
	The syntax is below:
		
		int variable;
		variable = (int) methodName();
	
	The methodName returns a double, but type casting changes the double data type into an int so it
	can be stored in the integer variable.

7. 
(a) Consider the following definition of a class called Robot:

	public abstract class Robot
	{
		private String id;
		private int securityLevel;
		private int warningLevel = 0;
		
		public Robot(String IdIn, int levelIn)
		{
			id = idIn;
			securityLevel = levelIn;
		}
		
		public String getId()
		{
			return id;
		}
		
		public int getSecurityLevel()
		{
			return securityLevel;
		}
		
		public abstract void calculateWarningLevel();
	}
		

(i) The following line of code is used in a program that has access to the Robot class:

	Robot aRobot = new Robot("R2D2", 1000);
	
Explain why this line of code would cause a compiler error.

	This would cause a compiler error because Robot is an abstract class, and we are unable to
	create Objects from abstract classes.

(ii) Consider the following class:

	public class CleaningRobot extends Robot
	{
		public String typeOfCleaningFluid;
		
		public CleaningRobot(String IdIn, int levelIn, String fluidIn)
		{
			super(IdIn, levelIn);
			typeOfCleaningFluid = fluidIn;
		}
		
		public String get TypeOfCleaningFluid()
		{
			return typeOfCleaningFluid;
		}
	}

Explain why any attempt to compile this class would result in a compiler error.

	The super class includes an abstract method, calculateWarningLevel().
	This must be included as an @Override method in the subclass, otherwise the code will not compile.

8. What is the effect of the final modifier, when applied to both classes and
methods?

	The final modifier, when used with a variable, does not allow the variable to be changed.
	When applied to classes, a final class cannot be inherited (subclasses cannot be created from a
	final class).
	When applied to methods, the method cannot be overridden.
	
	So:
	A final variable cannot be changed.
	A final class cannot be inherited.
	A final method cannot be overridden.

9. Look back at the EmployeeTester class from Sect. 9.6. What do you think
would happen if you replaced this line of testMethod:

	System.out.println(employeeIn.getName());

with the following line?

	System.out.println(employeeIn.getAnnualSalary());
	
	There would be a compilation error.

Give a reason for your answer.

	The original code, employeeIn.getName(), uses a method from the superclass, Employee.
	The new line uses a method from the FullTimeEmployee class.
	The code will not compile because calling a subclass method on a superclass Object causes an error.
	This is because the superclass cannot recognise methods within subclasses.


	
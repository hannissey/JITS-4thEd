
Chapter 5 - Methods

-------------------------------------------------------------

Learning Outcomes:

• explain the meaning of the term method;
	
	a method is a function - that is, it is a mini-program
	within a larger program, a method within a class.
	It performs a defined set of instructions that detail a
	specific task.
	
	Every Java class has a main method, but you can create
	additional methods to perform particular functions.

• declare and define methods;

	SYNTAX
	
	method header 
	static void methodName()
	{
		method body
		// do this
	}

• call a method;

	calling a method is requesting that a program then goes
	to the method itself, perform that set of instructions,
	and come back to the original program once the method
	has terminated.
	
	To call a method, simply type its name:
	displayMessage();

• explain the meaning of the terms actual parameters and formal parameters;

	actual parameters are the variables/values passed to the method when it is called.
	formal parameters are those exclusive to the method

• devise simple algorithms with the help of pseudocode;

	pseudocode is writing out a set of instructions that can then be written out in the
	appropriate syntax. A decision procedure that is broken down into small steps.
	
• identify the scope of a particular variable;
	
	scope can be local or global. Local scope means variables can only be accessed by
	the method or class in which they are declared. 
	Methods can only access 3 types of variable:
		- formal parameters (actual parameters passed to the method)
		- local (variables declared within the body of the method)
		- variables declared as attributes of a class

• explain the meaning of the term polymorphism;

	Polymorphism means 'of many forms', and is a way of describing that operators and
	methods can be overloaded, meaning the symbols and method names can be used to execute
	different processes. So for example, the + operator can be used for addition but also
	concatenation.
	With methods, methods can share names as long as the signatures are unique. For example,
	the method max has 2 formal parameters but can be differentiated from the method max that
	has 3 formal parameters. As long as the actual parameters passed to the method when it
	is called match the method required, the method will run.

• declare and use overloaded methods

	The following are two separate methods despite having the same name:

	max(int firstIn, int secondIn)
	max(int firstIn, int secondIn, int thirdIn)

	
-------------------------------------------------------------

Declaring & Defining Methods
-------------------------------------------------------------

Additional methods are written outside of the main method.

Here we have the example of a method that displays a confidentiality
message:

	static void displayMessage()
	{
		System.out.println("Message");
	}
	
Every time we call displayMessage() in our program it will print
out the line "Message".

The syntax is described as follows:

static

	methods that are static can only call other static methods
	mainly used for memory management
	"When a member is declared static, it can be accessed before
	any objects of its class are created, and without reference 
	to any object." - https://www.geeksforgeeks.org/static-keyword-java/
	
void

	the method does not return (send back) any information
	
displayMessage()

	the name we have given our message. The parentheses would
	contain any information we need to pass to the method. In
	this case, no info is required and so the parentheses are
	empty.
	
You can place your method before or after the main method, it
doesn't matter to the compiler as it will always start with main.
Starting out, we will be calling our methods from within the main
method, however methods can call other methods, and that method can
call another method. This is called "chained" methods.
It is important to note that once a method is called, the main method
effectively stops until the called method terminates, then resumes.

Looking at our method to replace the calculation in FindCost3.java,
there are a few things to note:

	static double addTax(double priceIn, double taxIn)
	{ 
	return priceIn * (1 + taxIn/100);
	}
	
Instead of void, we have double. This is because the method will be returning a
result of type double. If a method returns a value, the method type must be the same
as the return type, so a double, integer, char, boolean etc.

The method requires information to complete the task, which is the price, and the tax amount.
These are passed to the method within the parentheses, and are called formal parameters.
The formal parameters need to be unique and specific to that method, so instead of simply
passing price and tax, we declare two new exclusive variables, called priceIn and TaxIn.

The return keyword both ends the method, and sends back a value. In this method, it is
the result of the calculation. Void type methods do not need a return instruction.

The process of calling a method using parameters is called passing parameters.
When we call a method, we use the original program variables, which in this case are price
and tax, therefore the method call looks like this:

	// calling method
	addTax(price, tax)

However the method itself looks like this:

	// called method
	addTax(double priceIn, double taxIn)

price and tax are the actual parameters.
These are copied onto the formal parameters (passing parameters)
Therefore, price and priceIn contain the same value for the purpose of the program,
as does tax and taxIn.
You can name your formal parameters anything you like, and the actual parameters will
be passed in the same order given, as long as they are the same type & amount, eg

the method
	methodName(double anyName, boolean anyName)

can be called like this
	methodName(random, whatever)

as long as random is a type double, and whatever is type boolean.

However it is better to name your variables appropriately to avoid confusion and follow
convention.

If the amount of actual parameters used to call a method does not match the formal parameters
the method needs, the compiler would show you an error.

You can also send real values to methods, rather than variables, eg

	addTax(87.6, 10.0)

again, as long as the data types match.

	
-------------------------------------------------------------

Writing A Method
-------------------------------------------------------------

When writing a method, there are 4 things to consider:

• the name that we will give to the method;
• the inputs to the method (the formal parameters);
• the output of the method (the return value);
• the body of the method (the instructions that do the job required)

	static returnType methodName(formalParameter, formalParameter)
	{
		body of method
		return
	}

IMPORTANT! A method cannot change the original value of a variable passed to it as a parameter.
This is because only a copy of what is stored in the variable is passed on - the original
value remains intact.
See ParameterDemo for a demonstration.

	
-------------------------------------------------------------

Variable Scope
-------------------------------------------------------------

A question we may ask is why we need to create exclusive variables (formal parameters)
for our methods, instead of using the actual parameters.
Why do we need to change price to priceIn if the value is still the same?

The reason is scope. Local variables can only be used within the programs in which they have
been declared. If we are using a variable within the main method, this variable cannot be
used in additional methods. See program ScopeTest for an example.

A method is unaware of what has been declared in any other method. A good example of
encapsulation, it means we could use the same variable names throughout our programs, in
different methods for different purposes. The x variable in the main method and a helper method
would be treated as two separate entities.

To explain why this happens, think of a computer's memory when a program is running.
Part of the memory is called the stack, and some space is used to store the values within
this stack. A method is used during a program's runtime, and so once the method has
terminated, that part of the stack is no longer accessible.

To conclude, a method can only access:

	- formal parameter variables
	- local variables inside its body
	- class attributes

	
-------------------------------------------------------------

Method Overloading
-------------------------------------------------------------

We learned about operators being overloaded, eg:
/ can be used to divide both integers and real numbers
+ can be used for addition and concatenation

Overloading refers to a function behaving differently depending on what it is doing.

When two methods have the same name but a different set of parameters and functions, we say
the method is overloaded, because the name alludes to more than one thing - in this case,
methods.

// Note to self: it's interesting in Java how a name doesn't allude to one thing, and
it is the function and how it works that takes precedence, ie, bow is both a hair ribbon
and a weapon.
A bit like how context is important in the English language to help with our interpretation
of words.

Method overloading is an example of polymorphism.
Polymorphism means 'having many forms', and is an important feature of OOP.

So if we have two methods called 'max' that have a different set of parameters and 
perform different functions, how does the program know which one we mean?
It matches the actual parameters with the formal parameters, ie, if the first max method
only has two parameters and the second has three, if our method call contains two parameters
it will invoke the first method.

The method 'signature' is the name & parameter list contained in the header.

	
-------------------------------------------------------------

Using Methods In Menu Driven Programs
-------------------------------------------------------------

Look at the CircleCalculation program. This is a menu-driven program built using a 
switch statement. Instead of filling each case with blocks of code, we have kept it
compact by moving the code into methods instead, and then calling the methods when required.

Note how the radius variable is treated throughout the program:
The actual parameter used in the main method is radius

The representation of 'radius' is used differently in the methods however:
The method option1 does not have a formal parameter and therefore does not need to be passed
an actual parameter. However, a variable local to the option1 method is declared, myRadius.
which then stores the user's input and is passed back to the program and stored within radius.

When passed to method option2 and method option3, the formal parameters ask for radiusIn.
The radius is passed to the method via the passing parameters process which copies the
value of radius to radiusIn. This value is then used within the method for calculation.
	



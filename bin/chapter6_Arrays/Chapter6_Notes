

Chapter 6 - Arrays

-------------------------------------------------------------

Learning Outcomes:

	• create arrays;
	• use for loops to process arrays;
	• use an enhanced for loop to process an array;
	• use arrays as method inputs and outputs;
	• use arrays to send a variable number of arguments to a method;
	• develop routines for accessing and manipulating arrays;
	• distinguish between one-dimensional arrays and multi-dimensional arrays;
	• create and process two-dimensional arrays;
	• create ragged arrays.
	
-------------------------------------------------------------

6.2 Creating An Array

An array is a data type that acts as a container to store a collection of items.
The items are the 'elements' of the array, and must all be of the same type, ie 
integers, doubles, chars etc.

Creating an array is a two stage process:
- declare an array variable : int[] someArray;
- allocate memory to store the array elements : someArray = new int[10]

Declaring an array is similar to declaring a variable, but we drop the square brackets in
to indicate it is an array. someArray is now linked to a collection of double values - it
holds a reference to the array elements, not the elements themselves.
The new operator is used, however if the array elements are known at the time of declaring
the array, we can initialise the array without the use of the new keyword, as follows:

double[] temperature = [21, 20, 19.5, 21, 21.5, 22, 21);

We do not need to declare how many elements are in our array as the compiler knows this
by counting what is there.

So, to understand this better lets look at it visually.
We need to create an array that saves the temperature data of one week.

Our Java instruction is as follows:
double[] temperature = new double[7];

This has the following effect on the computer memory:

		temperature
			\/
	 item of type double
	 item of type double
	 item of type double
	 item of type double
	 item of type double
	 item of type double
	 item of type double
 
If you asked the computer to print the variable temperature, it would return a memory
address, which is where the computer has stored the references to the items/elements.
 
The array declaration and initialisation has created a memory reference that links to 7
unique variables, all double data types, all in a sequence (0, 1, 2, 3...). This is the index.
A way to think of it is like postal addresses:
- temperature is the street name
- item is the house
- the index is the house number

When you declare an array, the computer initialises the array items with a value.
Number types are initially set to 0.
Char is set to a Unicode character representing an empty character.
Boolean values are set to false.

So, when created an array looks like this (remember ARRAYS START AT 0):

	  array structure		value

		temperature			[D@4dd8dc3
			\/
	 temperature[0]			0
	 temperature[1]			0
	 temperature[2]			0
	 temperature[3]			0
	 temperature[4]			0
	 temperature[5]			0
	 temperature[6]			0

Fun analogy to build on the 'street' idea:

		main street			PO5T C0D3
			\/
		the big house		the coopers
		main street 1		the smiths
		main street 2		the banks
		main street 3		the jones
		main street 4		the greggs

-------------------------------------------------------------

6.3 Accessing Array Elements

It is important to note that as arrays start at 0, the array index is used to locate an
element in the array: it is not the item at that position, eg
temperature[0] is the first element in the array.

You can use array elements in exactly the same way as normal variables.
eg, using the array below:

int[] numberArray = [5, 10, 20];

We can perform these types of calculations:

numberArray[0] + numberArray[2] = 25

To explain, this is simply the value at the index 0, which is 5, added to the value at
index 2, which is 20. Hence, the answer is 25.

The indexing system of arrays is very powerful, as we can use a variable that represents
a value to access an array element - this is useful in for loops, where we need to iterate
over an array, but cannot use the actual value.

	for(int i = 0; i<7; i++) // note, loop counter runs from 0 to 6
	{
		System.out.println("enter max temperature for day "+(i+1));
		temperature[i] = keyboard.nextDouble(); // use loop counter
	}
	
The above code enables us to populate the array using a for loop, which substitutes the
array index with an incrementing counter, and terminates once the array is full.

Some points:
- This for loop starts at 0, because arrays start at 0
- The array has 7 elements, however as we are starting from 0 we do not include 7 in the
counter. The loop will still run 7 times however as we start from 0.
- The println instruction uses the i variable, however because the first loop iteration would
ask the user for the temperature for day 0, we need to increment this by 1 to make sense!

We can replace the i<7 counter in the loop header with the .length feature:

for(int i = 0; i < temperature.length; i++)

The .length feature returns the size of an array, so this will then run the loop for each 
element in the array. 

-------------------------------------------------------------

6.4 Passing Arrays as Parameters

A method is used to break up programs to make them both more readable and more manageable.
Using methods enables the code in question to be called whenever necessary, without
duplicating large blocks of code. 

Just like with variables, we can send arrays to methods to be used within that method.

To give methods access to an array, we need to send the array as a parameter.
The syntax is as follows:

	static returnType methodName( datatype[] arrayName )
	{
		// code here
	}
	
We only need the datatype, square brackets, and array name as a parameter.
The size is not required.

When sending a variable to a method, the passing parameters process copies the value of
the variable from the actual parameters to the formal parameters, so the original value
of the variable is not changed. This is not the case with arrays.

Because the array name (eg System.out.println(temperature);) is simply a reference to the
memory address and not where the actual values are stored, this points the program to the
same variables used as the original array. This means that it is the original values that
are modified within the method.

This is why we can use methods to fill arrays, but not variables.
Notice that when we send an array to a method, only the array name is used. However, when
writing methods we still need to include the datatype[] in the method signature.

Sending an array reference to a method is a great way of using memory efficiently, as it
is only the address of the array that is sent to the method, rather than the values within
that array.



-------------------------------------------------------------

6.5 Varargs

You can send both arrays and multiple values to a method that uses varargs.
It will turn any input into an array.

Varargs is short for variable arguments. Instead of sending the entire array to the method,
This feature enables us to send a collection of values to the method, as long as it is 
the same data type.

Varargs parameters are implicitly turned into arrays when they are received by a method.

// METHOD SYNTAX

	static returnDataType methodName(dataType... arrayNameIn)
	{
		// code here
	}
	
We can call a varargs method using the syntax below:

methodName(9.9, 3.0, 5.6);

We can also call a varargs method with no values at all, the code will still run:

methodName( );

// Signature Order

If your method needs additional parameters to run, the varargs parameter must come last
in the parameter list otherwise the code will not compile.
This is demonstrated in program TemperatureReadingsWithDaysOfTheWeek

The reason for this is that it makes the compiler's life easier, according to stack overflow!
https://stackoverflow.com/questions/9372916/why-is-varargs-always-the-last-parameter-in-a-method-signature

-------------------------------------------------------------

6.6 Returning An Array From A Method

When we send an array as a parameter to a method, we do not need to return it, as the
method has already modified the array as per the method. Remember that unlike variables,
the original array itself can be modifed via a method.

However, we may use a method to populate an array, and in this case we would need to
return the array so it can be available to the program.

SYNTAX

	// this is a method
	static dataType[] methodName() // ensure the return type matches the array data type
	{
		dataType[] modifiedArrayOut; // new array declared with local name
		// code populates array
		return modifiedArrayOut; // array local name returned
	}

Note that instead of void, double, int etc, we specify the return type of the method to be
an array: dataType[] (eg double[] for an array containing double values, int[] for an array
containing integers, etc)

As the array is created within the method, we can create a name that is local to the method.
dataType[] modifiedArrayOut

and when we return the method, only the name is required:
return modifiedArrayOut

Note that this method does not require any parameters, so it can be called with:
methodName();

This can be assigned to a variable which will then store the result of the method, which
is a populated array.

variable = methodName();



-------------------------------------------------------------

6.7 The Enhanced 'for' Loop

	for (datatype item : arrayName)
	{
		System.out.println(item);
	}
	
The enhanced for loop is used to iterate over an array.
The item keyword is a variable (that can be of any name) that stores
the array value on each iteration, that lasts as long as the array length.
Because the enhanced for loop header can be read as 'for each item in this array', it is
also known as a for each loop. 

It is similar to the for loop but does not require a counter. Additionally, We do not need
to specify an array element index to access the value of the element at that
position. This makes the code a lot neater.

An example:

We have an array:
int[] numberArray = {1, 2, 3, 4, 5};

We simply want to display the array on the screen:

	for (int number : numberArray);
	{
		System.out.println(number)
	}

This will display:

	1
	2
	3
	4
	5

See DisplayTemperaturesWithVarargs program for an example of the enhanced for loop
replacing a for loop that uses a counter & index. The results are the same.

You should only use an enhanced for loop when you:

- need to access the entire array and not parts of it
- want to see what's in the array, and not modify them
- do not need the array index in any way


-------------------------------------------------------------

6.8 Some Useful Array Methods

The array feature in Java does not come with any useful in-built routines, so we have to
create our own methods for processing an array. These are below, with a final program
SomeUsefulArrayMethods to demonstrate usage.

6.8.1 Array Maximum
	- find the maximum value in an array
___________________

PSEUDOCODE

	SET result TO first value in array
	LOOP FROM second element in array TO last element in array
		BEGIN
		IF current element > result
			BEGIN
			SET result TO current element
			END
		END
	RETURN result

6.8.1 Array Summation
	- calculates the total of all values in an array
___________________

PSEUDOCODE

	SET total TO zero
	LOOP FROM first element in array TO last element in array
		BEGIN
			SET total TO total + value of current element
		END
	RETURN total


6.8.1 Array Membership
	- determine if an array holds a specified value
___________________


6.8.1 Array Search
	- determine the position of a value in the array
___________________

Notes To Self:

There are some differences of opinion whether it is better to simply call the method and
display the output:

	System.out.println(methodName(parameter));

Or store the method call in a variable, eg:

	variable = methodName(parameter);

The latter is best practice.


"It is better practice to hold the output in a variable rather than calling the function
again. The variable is going to be held in memory as long as it requires. After that
automatic garbage collection will take care of that to free it up from the memory.
But if you call the function, it will eat up the memory for its activation record stack
each time it gets called. So if you want your program not to be memory hungry, its better
to store the result in a variable and use it wherever it is required."
- https://stackoverflow.com/questions/3383465/is-it-better-to-store-value-as-variable-or-call-method-again

Also see memoisation for more info on optimising program memory.

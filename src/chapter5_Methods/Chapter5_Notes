
// Started 8.21

Chapter 5 - Methods

Learning Outcomes:

• explain the meaning of the term method;
	
	a method is a function - that is, it is a mini-program
	within a larger program, a method within a class.
	It performs a defined set of instructions that detail a
	specific task.
	
	Every Java class has a main method, but you can create
	additional methods to perform particular functions.

• declare and define methods;

	SYNTAX
	
	method header 
	static void methodName()
	{
		method body
		// do this
	}

• call a method;

	calling a method is requesting that a program then goes
	to the method itself, perform that set of instructions,
	and come back to the original program once the method
	has terminated.
	
	To call a method, simply type its name:
	displayMessage();

• explain the meaning of the terms actual parameters and formal parameters;

	actual parameters are the variables/values passed to the method when it is called.
	formal parameters are those exclusive to the method

• devise simple algorithms with the help of pseudocode;
• identify the scope of a particular variable;
• explain the meaning of the term polymorphism;
• declare and use overloaded methods


Declaring & Defining Methods

Additional methods are written outside of the main method.

Here we have the example of a method that displays a confidentiality
message:

	static void displayMessage()
	{
		System.out.println("Message");
	}
	
Every time we call displayMessage() in our program it will print
out the line "Message".

The syntax is described as follows:

static

	methods that are static can only call other static methods
	mainly used for memory management
	"When a member is declared static, it can be accessed before
	any objects of its class are created, and without reference 
	to any object." - https://www.geeksforgeeks.org/static-keyword-java/
	
void

	the method does not return (send back) any information
	
displayMessage()

	the name we have given our message. The parentheses would
	contain any information we need to pass to the method. In
	this case, no info is required and so the parentheses are
	empty.
	
You can place your method before or after the main method, it
doesn't matter to the compiler as it will always start with main.
Starting out, we will be calling our methods from within the main
method, however methods can call other methods, and that method can
call another method. This is called "chained" methods.
It is important to note that once a method is called, the main method
effectively stops until the called method terminates, then resumes.

// Paused 09.00
// Resumed 10.50

Looking at our method to replace the calculation in FindCost3.java,
there are a few things to note:

	static double addTax(double priceIn, double taxIn)
	{ 
	return priceIn * (1 + taxIn/100);
	}
	
Instead of void, we have double. This is because the method will be returning a
result of type double. If a method returns a value, the method type must be the same
as the return type, so a double, integer, char, boolean etc.

The method requires information to complete the task, which is the price, and the tax amount.
These are passed to the method within the parentheses, and are called formal parameters.
The formal parameters need to be unique and specific to that method, so instead of simply
passing price and tax, we declare two new exclusive variables, called priceIn and TaxIn.

The return keyword both ends the method, and sends back a value. In this method, it is
the result of the calculation. Void type methods do not need a return instruction.

The process of calling a method using parameters is called passing parameters.
When we call a method, we use the original program variables, which in this case are price
and tax, therefore the method call looks like this:

	// calling method
	addTax(price, tax)

However the method itself looks like this:

	// called method
	addTax(double priceIn, double taxIn)

price and tax are the actual parameters.
These are copied onto the formal parameters (passing parameters)
Therefore, price and priceIn contain the same value for the purpose of the program,
as does tax and taxIn.
You can name your formal parameters anything you like, and the actual parameters will
be passed in the same order given, as long as they are the same type & amount, eg

the method
	methodName(double anyName, boolean anyName)

can be called like this
	methodName(random, whatever)

as long as random is a type double, and whatever is type boolean.

However it is better to name your variables appropriately to avoid confusion and follow
convention.

If the amount of actual parameters used to call a method does not match the formal parameters
the method needs, the compiler would show you an error.

You can also send real values to methods, rather than variables, eg

	addTax(87.6, 10.0)

again, as long as the data types match.

Writing A Method

When writing a method, there are 4 things to consider:

• the name that we will give to the method;
• the inputs to the method (the formal parameters);
• the output of the method (the return value);
• the body of the method (the instructions that do the job required)

	static returnType methodName(formalParameter, formalParameter)
	{
		body of method
		return
	}

IMPORTANT! A method cannot change the original value of a variable passed to it as a parameter.
This is because only a copy of what is stored in the variable is passed on - the original
value remains intact.
See ParameterDemo for a demonstration.

// Pausing at 12.47, pick up at 5.6 Variable Scope.
	



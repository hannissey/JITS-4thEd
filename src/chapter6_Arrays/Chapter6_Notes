

Chapter 6 - Arrays

-------------------------------------------------------------

Learning Outcomes:

	• create arrays;
	• use for loops to process arrays;
	• use an enhanced for loop to process an array;
	• use arrays as method inputs and outputs;
	• use arrays to send a variable number of arguments to a method;
	• develop routines for accessing and manipulating arrays;
	• distinguish between one-dimensional arrays and multi-dimensional arrays;
	• create and process two-dimensional arrays;
	• create ragged arrays.
	
-------------------------------------------------------------

6.2 Creating An Array

An array is a data type that acts as a container to store a collection of items.
The items are the 'elements' of the array, and must all be of the same type, ie 
integers, doubles, chars etc.

Creating an array is a two stage process:
- declare an array variable : int[] someArray;
- allocate memory to store the array elements : someArray = new int[10]

Declaring an array is similar to declaring a variable, but we drop the square brackets in
to indicate it is an array. someArray is now linked to a collection of double values - it
holds a reference to the array elements, not the elements themselves.
The new operator is used, however if the array elements are known at the time of declaring
the array, we can initialise the array without the use of the new keyword, as follows:

double[] temperature = [21, 20, 19.5, 21, 21.5, 22, 21);

We do not need to declare how many elements are in our array as the compiler knows this
by counting what is there.

So, to understand this better lets look at it visually.
We need to create an array that saves the temperature data of one week.

Our Java instruction is as follows:
double[] temperature = new double[7];

This has the following effect on the computer memory:

		temperature
			\/
	 item of type double
	 item of type double
	 item of type double
	 item of type double
	 item of type double
	 item of type double
	 item of type double
 
If you asked the computer to print the variable temperature, it would return a memory
address, which is where the computer has stored the references to the items/elements.
 
The array declaration and initialisation has created a memory reference that links to 7
unique variables, all double data types, all in a sequence (0, 1, 2, 3...). This is the index.
A way to think of it is like postal addresses:
- temperature is the street name
- item is the house
- the index is the house number

When you declare an array, the computer initialises the array items with a value.
Number types are initially set to 0.
Char is set to a Unicode character representing an empty character.
Boolean values are set to false.

So, when created an array looks like this (remember ARRAYS START AT 0):

	  array structure		value

		temperature			[D@4dd8dc3
			\/
	 temperature[0]			0
	 temperature[1]			0
	 temperature[2]			0
	 temperature[3]			0
	 temperature[4]			0
	 temperature[5]			0
	 temperature[6]			0

Fun analogy to build on the 'street' idea:

		main street			PO5T C0D3
			\/
		the big house		the coopers
		main street 1		the smiths
		main street 2		the banks
		main street 3		the jones
		main street 4		the greggs

-------------------------------------------------------------

6.3 Accessing Array Elements

It is important to note that as arrays start at 0, the array index is used to locate an
element in the array: it is not the item at that position, eg
temperature[0] is the first element in the array.

You can use array elements in exactly the same way as normal variables.
eg, using the array below:

int[] numberArray = [5, 10, 20];

We can perform these types of calculations:

numberArray[0] + numberArray[2] = 25

To explain, this is simply the value at the index 0, which is 5, added to the value at
index 2, which is 20. Hence, the answer is 25.

The indexing system of arrays is very powerful, as we can use a variable that represents
a value to access an array element - this is useful in for loops, where we need to iterate
over an array, but cannot use the actual value.

	for(int i = 0; i<7; i++) // note, loop counter runs from 0 to 6
	{
		System.out.println("enter max temperature for day "+(i+1));
		temperature[i] = keyboard.nextDouble(); // use loop counter
	}
	
The above code enables us to populate the array using a for loop, which substitutes the
array index with an incrementing counter, and terminates once the array is full.

Some points:
- This for loop starts at 0, because arrays start at 0
- The array has 7 elements, however as we are starting from 0 we do not include 7 in the
counter. The loop will still run 7 times however as we start from 0.
- The println instruction uses the i variable, however because the first loop iteration would
ask the user for the temperature for day 0, we need to increment this by 1 to make sense!

We can replace the i<7 counter in the loop header with the .length feature:

for(int i = 0; i < temperature.length; i++)

The .length feature returns the size of an array, so this will then run the loop for each 
element in the array. 

-------------------------------------------------------------

6.4 Passing Arrays as Parameters

-------------------------------------------------------------

6.5 Varargs

-------------------------------------------------------------

6.6 Returning An Array From A Method

-------------------------------------------------------------

6.7 The Enhanced 'for' Loop

	for (datatype item : arrayName)
	{
		System.out.println(item);
	}

paused 14.37 - page 138